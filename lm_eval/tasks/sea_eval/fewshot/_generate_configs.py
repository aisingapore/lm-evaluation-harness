import importlib
import re
from collections.abc import MutableMapping
from pathlib import Path

import jinja2
import tiger_eval
import yaml
from tqdm import tqdm


CWD = Path(__file__).resolve().parent


class Function(yaml.YAMLObject):
    yaml_tag = "!function"

    def __init__(self, value):
        self.value = value

    def __repr__(self):
        return f"{self.value}"


def function_representer(dumper, data):
    return dumper.represent_scalar("{}".format(data.yaml_tag), "{}".format(data))


yaml.add_representer(Function, function_representer)


class CrossLingualAssessment:
    LANGS = [
        "Chinese",
        "Indonesian",
        "Spanish",
        "Vietnamese",
        "Malay",
        "English",
        "Filipino",
    ]
    FILE = "cross_lingual_assessment_utils"
    COMMA_PERIOD = re.compile(r"\.|,")

    def __init__(self):
        mock_data_with_model_prediction = [
            {
                lang: {
                    "choices": ["A", "B", "C"],
                    "answer": "A",
                    "model_prediction": "A",
                }
                for lang in self.LANGS
            }
        ]
        result = tiger_eval.cross_lingual_assessment.score(mock_data_with_model_prediction)
        self.metrics = self._flatten_keys(result)

        env = jinja2.Environment(loader=jinja2.FileSystemLoader(searchpath=CWD))
        template = env.get_template(f"{self.FILE}.py.jinja")
        with open(CWD / f"{self.FILE}.py", "w") as outfile:
            outfile.write("# Generated by _generate_configs.py\n")
            outfile.write(template.render(metrics=self.metrics))

    def get_metrics(self):
        return [
            {
                "metric": Function(f"{self.FILE}.ac3_{metric['fn_name']}"),
                "aggregation": Function("utils.tiger_eval_cross_lingual_assessment"),
                "higher_is_better": True,
                "key": metric['key'],
            }
            for metric in self.metrics
        ]

    def _flatten_keys(self, d, parent_key="", separator="."):
        result = []
        for key, value in d.items():
            new_key = f"{parent_key}{separator}{key}" if parent_key else key
            if isinstance(value, MutableMapping):
                result.extend(self._flatten_keys(value, new_key, separator))
            else:
                result.append(
                    {
                        "fn_name": re.sub(self.COMMA_PERIOD, "_", new_key),
                        "key": new_key,
                    }
                )
        return result


def main():
    cross_lingual_assessment = CrossLingualAssessment()

    dataset_name = "sea_eval"
    tasks = ["cmmlu", "cross_mmlu", "flores_ind2eng", "samsum", "sg_eval"]
    for task in tqdm(tasks):
        if task.startswith("cross_"):
            config = {
                "include": f"_{task}_yaml",
                "task": f"{dataset_name}_fewshot_{task}",
                "process_docs": Function(f"{task}_utils.process_docs"),
                "metric_list": cross_lingual_assessment.get_metrics(),
            }
            with open(CWD / f"{task}.yaml", "w") as outfile:
                outfile.write("# Generated by _generate_configs.py\n")
                yaml.dump(config, outfile)


if __name__ == "__main__":
    main()

