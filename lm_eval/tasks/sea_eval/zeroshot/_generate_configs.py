import importlib
from pathlib import Path

import yaml
from tqdm import tqdm


CWD = Path(__file__).resolve().parent


class Function(yaml.YAMLObject):
    yaml_tag = u"!function"

    def __init__(self, value):
        self.value = value

    def __repr__(self):
        return f"{self.value}"


def function_representer(dumper, data):
    return dumper.represent_scalar(u"{}".format(data.yaml_tag), u"{}".format(data))


yaml.add_representer(Function, function_representer)


def main():
    dataset_name = "sea_eval"
    #  tasks = ["sg_eval"]
    tasks = ["flores_ind2eng"]
    for task in tqdm(tasks):
        for i in range(5):
            with open(CWD / f"{task}_prompt_{i}.yaml", "w") as outfile:
                outfile.write("# Generated by _generate_configs.py\n")
                yaml.dump(
                    {
                        "include": f"_{task}_yaml",
                        "task": f"{dataset_name}_zeroshot_{task}_prompt_{i}",
                        "process_docs": Function(f"{task}_utils.process_docs_prompt_{i}")
                    },
                    outfile,
                )


if __name__ == "__main__":
    main()
